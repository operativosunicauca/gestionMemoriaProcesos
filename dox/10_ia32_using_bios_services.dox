/**
@page ia32_using_bios_services Uso de los servicios de la BIOS
@author Erwin Meza Vega <emezav@gmail.com>

@ref project_start : @ref ia32_intro : @ref ia32_assembly_basics : Servicios de la BIOS

@par Breve reseña de la BIOS

La BIOS (Basic Input-Output System) ofrece una serie de servicios, en forma de 
interrupciones por software que pueden ser invocadas desde el código de un 
sector de arranque o de un sistema operativo que se ejecuta en Modo Real. 
Este documento presenta los conceptos básicos relacionados con el uso de los 
servicios proporcionados por la BIOS.

Cuando se enciende el computador o se pulsa el boton RESET, el procesador pasa
el control a la BIOS. La BIOS contiene una serie de rutinas encargadas de 
establecer un entorno inicial para la ejecución del procesador en modo real. 
Sus principales tareas son:

* Realizar un chequeo inicial del hardware (procesador, memoria RAM y 
dispositivos de entrada/salida)

* Mapear algunos dispositivos de entrada / salida en memoria (por ejemplo,
  la memoria de video de modo texto a color en la direccion 0xB8000

* Establecer las rutinas básicas de manejo de interrupción para los
  dispositivos que ha detectado, las rutinas para el manejo de las excepciones
  del procesador y las rutinas para los servicios proporcionados por la BIOS.

En la arquitectura IA-32, las interrupciones pueden ser
de tres tipos: interrupciones  lanzadas por el hardware (por ejemplo 
interrupciones del teclado, del mouse, etc), interrupciones generadas por 
software (mediante la instrucción int @b N, donde N  es el número de la
interrupción), y condiciones de error del procesador, conocidas como 
excepciones (por ejemplo, división por cero).

La BIOS configura la Tabla de Descriptores de Interrupción (Interrupt Descriptor
Table, IDT) al inicio de la memoria RAM. Esta tabla contiene exactamente 256 
entradas de 4 bytes, las cuales contienen apuntadores a rutinas de manejo de 
interrupción. Cada apuntador consta de dos valores, que representan
los valores de deben tomar @b CS e @b IP para apuntar a la rutina específica
que maneja la interrupción.

@par Manejo de Interrupciones

Cuando ocurre la interrupcion N, el procesador automáticamente almacena en la 
pila el valor actual de CS e EI (es decir la dirección de la 
siguiente instrucción que se debe ejecutar luego de completar la rutina de 
manejo de interrupción). Luego, busca la N-ésima entrada de la IDT, que se
encuentra exactamente a N * 4 bytes desde su inicio (dado que
cada entrada ocupa exactamente 4 bytes). Esta entrada contiene los valores que 
debe tomar CS e IP para ejecutar la rutina para manejar la interrupción N.

Cuando la rutina de manejo de interrupción termina,el procesador obtiene 
de la pila los valores de CS e IP que permiten retornar al punto 
de ejecución en el cual se encontraba el procesador en el momento en que ocurrió
la interrupción.

En la actualidad, los servicios de la  BIOS sólo se utilizan mientras el 
código del sector de arranque ejecuta la funcionalidad necesaria para cargar el 
kernel y pasar a modo protegido de 32 bits.  Una vez en modo protegido, kernel 
completa la carga del sistema operativo, en el cual se incluye el código 
específico para acceder a los dispositivos de entrada y salida sin necesidad de
usar los servicios de la BIOS.

@section basic_bios_usage Uso básico de los servicios de la BIOS

Para usar los servicios de la BIOS en modo real, el código debe establecer
 primero los registros del procesador en unos valores específicos para cada 
servicio. Luego se debe invocar una interrupción por software, por medio 
de la instrucción int N (donde N es el numero de la interrupción). 

A continuación se presentan los servicios mas comunes que se usan en  modo real.
Para cada uno de ellos, se especifica el número de la interrupción
que se debe invocar, y los valores de los registros del procesador que deben ser
establecidos antes de invocar la interrupcion y los valores que retorna la BIOS.


@section bios_video_services (int 0x10)
La BIOS ofrece una serie de servicios de video por medio de la interrupción
0x10. A continuación se presentan los servicios de video más importantes:

@par Establecer el modo de video

@verbatim
    AH = 0x00
    AL = modo de video
@endverbatim
   
Algunos modos de video válidos para cualquier tarjeta de video VGA son:
 
@verbatim
       AL = 0x00  Modo texto de 25 filas, 40 columnas, blanco y negro
          = 0x01  Modo texto de 25 filas, 40 columnas, 16 colores
          = 0x02  Modo texto de 25 filas, 80 columas, escala de grises
          = 0x03  Modo texto de 25 filas, 80 columnas, 16 colores
          = 0x04  Modo grafico de 320x200 pixels, 4 colores por pixel
          = 0x0D  Modo grafico de 320x200 pixels, 16 colores por pixel
          = 0x0E  Modo grafico de 640x200 pixels, 16 colores por pixel          
          = 0x11  Modo grafico de 640x480 pixels, blanco y negro
          = 0x12  Modo grafico de 640x480 pixels, 16 colores por pixel
          = 0x13  Modo grafico de 320x200 pixels, 256 colores por pixel
@endverbatim
    
Estos modos dependen del tipo de tarjeta grafica (CGA, EGA, VGA).
El modo de video por defecto es Modo Texto, 25 filas, 80 columnas, 16 colores.

@par Leer la posición actual del cursor

@verbatim
    ah  = 0x03
@endverbatim
    
La BIOS almacena la fila actual del cursor en el registro DH, y la columna 
actual en el registro DL.

@par Establecer la posicion del cursor

@verbatim
    AH = 02
    DH = fila
    DL = columna
@endverbatim

Esta rutina establece la posicion del cursor a los valores especificados. Todas
las posiciones son relativas a 0,0, que representa la esquina superior de la 
pantalla. Si no se configura de otra forma, la pantalla de video de solo texto 
ocupa 25 filas por 80 columnas (fila 0 a 24, columna 0 a 79).

@par Escribir un caracter en modo 'terminal' (modo texto)

@verbatim
    AH = 0x0E
    AL = Caracter ascii que se desea escribir
@endverbatim

Esta rutina imprime el caracter en la pantalla. Los caracteres Backspace (0x08),
Fin de línea (0x0A) y Retorno de Carro (0x0D) se tratan de forma consistente. 
Igualmente, se actualiza la posición actual del cursor. 


@section bios_keyboard_services Servicios de teclado(int 0x16)

La BIOS ofrece una serie de servicios de teclado por medio de la interrupción
0x16. A continuación se presentan los servicios de teclado mas importantes:

@par Leer un caracter de teclado

@verbatim
    AH = 0x00
@endverbatim
    
La BIOS almacena el caracter ASCII leido en el registro AL, y el código
de escaneo (Scan Code) en el registro AH. Si se presionó una tecla de
funcion especial (shift, esc, F1, etc), AL contiene 0x00.
    
@par Leer el estado del teclado

@verbatim    
    AH = 0x01
@endverbatim
    
    
Si no existe una tecla presionada, AX toma el valor de cero. Si existe una tecla 
presionada, AL contiene el código ASCII de la tecla, y AH contiene el código de
escaneo (Scan Code).  Tambien si existe una tecla presionada, el bit ZF 
(Zero Flag) del registro FLAGS se establece en 0.
    
@par Leer el estado de 'shift' 

@verbatim
    AH = 0x02
@endverbatim
    
    La BIOS establece los bits del registro AL con el siguiente formato:

@verbatim    
    
    ¦7¦6¦5¦4¦3¦2¦1¦0¦  
    ¦ ¦ ¦ ¦ ¦ ¦ ¦ +---- right shift está presionado
    ¦ ¦ ¦ ¦ ¦ ¦ +----- left shift está presionado
    ¦ ¦ ¦ ¦ ¦ +------ CTRL está presionado
    ¦ ¦ ¦ ¦ +------- ALT está presionado
    ¦ ¦ ¦ +-------- Scroll Lock está activo
    ¦ ¦ +--------- Num Lock está activo
    ¦ +---------- Caps Lock está activo
    +----------- Insert está activo
@endverbatim    
    
@section bios_disk_services Servicios de disco (int 0x13)

Por medio de la interrupción 0x13, la BIOS ofrece una serie de servicios para 
los discos. A continuación solo se presenta el servicio que permite leer
sectores del disco.
 
@par Leer sectores de disco

@verbatim
   AH = 0x02
   AL = Numero de sectores a leer 
   CH = numero de la pista / cilindro  * ver nota
   CL = numero del sector * ver nota
   DH = numero de la cabeza 
   DL = numero del drive (0x00=floppy A:, 0x01=floppy B:, 80h=disco primario, 
                           81h=disco  secundario)
   ES:BX = Apuntador a la posición de memoria en la cual se leen los datos

@endverbatim

@note El formato del registro CX (CH:CL) es el siguiente:

@verbatim
   
   ¦F¦E¦D¦C¦B¦A¦9¦8¦7¦6¦5-0¦  CX
   ¦ ¦ ¦ ¦ ¦ ¦ ¦ ¦ ¦ ¦  +-----  Numero del sector (6 bits)
   ¦ ¦ ¦ ¦ ¦ ¦ ¦ ¦ +---------  2 bits mas significativos de la pista / cilindro
   +------------------------  8 bits menos significativos de la pista / cilindro
@endverbatim

La BIOS lee el número de sectores especificados en el registro AL, comenzando en
el sector, el cilindro y la cabeza especificados en los registros CL, CH y
DH del disco especificado en DL a la posicion de memoria apuntada por
ES:BX. La BIOS entonces almacena el AH el estado de la lectura, en AL
el nÚmero de lectores que se pudieron leer, y establece el bit CF (Carry 
Flag) del registro FLAGS en 0 si la lectura fue exitosa o 1 si ocurriÓ un 
error.
   
Las lecturas de disco se deberían re-intentar al menos tres veces, para 
permitir que el controlador del disco se ubique en los sectores que se
desean leer. Debido a que en estos ejemplos se usa una imagen de disco, 
se supone que la lectura nunca falla. En caso que la lectura falle, el código
entra en un ciclo infinito. 
   

@section bios_usage_examples  Ejemplo de uso de servicios de la BIOS

Los siguientes ejemplos asumen que el código se está ejecutando en modo real
(por ejemplo este código es ejecutado por un sector de arranque cargado por
la BIOS en la dirección 0x7C00).

@par Imprimir el carácter '@' por pantalla:

@verbatim
  mov ah, 0x0E /* Servicio a usar */
  mov al, 0x40 /* Caracter '@' */
  int 0x10 /* Invocar la interrupción 0x10 : servicios de video de la BIOS */
@endverbatim

Otra versión del código para imprimir un carácter por pantalla:

@verbatim
  mov ax, 0x0E40 /* AH = 0x0E, AL = 0x40 */
  int 0x10 /* Invocar la interrupción 0x10 : servicios de video de la BIOS */
@endverbatim

@par Leer un carácter del teclado:

@verbatim
 mov AH, 0x00 /* Servicio de teclado : leer un caracter */
 int 0x16 /* Invocar la interrupción 0x16: servicios de teclado de la BIOS */
@endverbatim

@par Leer el segundo sector del floppy (cilindro 0, pista 0, sector 2) a la dirección de memoria 0x1000

@verbatim
  mov AX, 0x100
  mov ES, AX /* ES = 0x100*/
  mov BX, 0x0000  /* BX = 0, por lo tanto ES:BX apunta a 0x1000 */
  
  mov AH, 0x2   /*  Servicio de disco: leer un sector */
  mov AL, 1 /* Número de sectores a leer: 1 */
  
  mov CH, 0x00 /* Pista / cilindro =  0 */
  mov DH, 0x00 /* Cabeza = 0*/
  mov CL, 0x02 /* Sector número 2 */
  
  mov DL, 0x00 /* Drive 0x00 = floppy, 0x80 = disco primario */
 
  int 0x13
   
@endverbatim
         
 
@see @ref ia32_assembly_basics
@see @ref ia32_using_the_stack
@see @ref ia32_using_routines
@see @ref ia32_execution_environment
@see @ref ia32_operation_modes
@see @ref ia32_memory_organization
@see @ref ia32_execution_environment
@see @ref protected_mode_setup
@see @ref gdt_page

@see http://www.gnu.org/software/grub/ Página oficial de GRUB (Enlace externo)
@see http://docs.huihoo.com/help-pc/int.html Documentación de los servicios de la BIOS


*/
