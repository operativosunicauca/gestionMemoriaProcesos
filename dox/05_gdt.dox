/**
@page gdt_page Tabla Global de Descriptores - GDT
@author Erwin Meza Vega <emezav@gmail.com>

@ref project_start : @ref ia32_intro : GDT

La GDT es una tabla que usa el procesador cuando se encuentra en modo protegido 
para traducir direcciones lógicas a direcciones lineales de memoria. Si la
paginación se encuentra deshabilitada, la dirección lineal hallada se toma como
una dirección física directamente.

@note Antes de pasar a modo protegido, se debe configurar una GDT que contenga
al menos dos descriptores: un descriptor de segmento de código y un descriptor
de segmento de datos.

@section segment_descriptors Descriptores de segmento

La GDT está compuesta por uno o más descriptores de segmento.  Cada descriptor 
de segmento es una estructura de datos que contiene información de la ubicación
de un segmento en memoria, su tipo y algunas opciones de protección.

Un descriptor de segmento ocupa 8 bytes (64 bits), distribuidos de la siguiente
forma:

@verbatim
					Descriptor de Segmento

31                23                15                7                   0
+-----------------+-----------------+-----------------------------------+
|                 | |D| |A|         | |     | |       |                 |
| BASE 24..31     |G|/|L|V| LIMIT   |P| DPL |S| TYPE  | BASE 16..23 	| 4
|                 | |B| |L| 16..19  | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
| SEGMENT BASE 0..15                | SEGMENT LIMIT 0..15               | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+
  

@endverbatim

En el Manual de Intel Intel® 64 and IA-32 Architectures Software Developer’s 
Manual Volume 3A: System Programming Guide, Part 1 (pág 95) describe cada
uno de los campos de un descriptor. A continuación se presenta una breve
reseña de estos campos.
- Limit (20 bits): Define el tamaño del segmento. Para calcular el tamaño en 
  bytes de un segmento se toma el valor de Límite y se verifica el bit G 
  (Granularidad). Si G = 0, el valor de límite se expresa en bytes.
  Si  G = 1, el valor de límite expresa en unidades de memoria de 4 KB. De esta
  forma, el máximo tamaño de un segmento, si todos los bits de Límite se 
  encuentran en 1 y el bit G se encuentra en 1 es de 4 GB 
  (2 ^ 20 * 4 KB  = 2 ^ 20 * 2 ^ 12 bytes = 2 ^ 32 = 4 GB). 
  Los bits que conforman el valor de Limit se encuentran dispersos dentro del
  descriptor.
- Base (32 bits): Define la dirección lineal en la cual inicia el segmento en
  el espacio lineal de direcciones.  Dado que se dispone de 32 bits para Base, 
  el segmento puede empezar en cualquier dirección en el espacio lineal.
  Los bits que conforman el valor de Base se encuentran dispersos dentro del
  descriptor.
- Type: Permite especificar el tipo de segmento y especifica los tipos de acceso
  permitidos. Por ejemplo, se puede definir un segmento de datos de sólo lectura
  o un segmento de datos de lectura / escritura.
- S: Determina el tipo de descriptor de segmento. Si el descriptor es para un
  segmento de código o datos, S = 1. Si el descriptor es de otro tipo 
  (descriptor del sistema), S = 0.
- DPL: Especifica el nivel de privilegios del segmento. Debido a que sólo
  se tienen 2 bits para DPL, los privilegios válidos son 0, 1 2 y 3. El nivel
  de mayor privilegios es 0.
- P: Permite verificar si el segmento está presente en memoria (P = 1) o no
  (P = 0)  
- AVL: Este bit se encuentra disponible para uso del sistema.
- L: Este bit debe ser cero para procesadores de 32 bits. Sólo se usa en
  procesadores de 63 bits, y permite definir que se está describiendo 
  un segmento de código de 64 bits. 
- D/B — Default operation size: Permite definir el tamaño de operando por 
  defecto del segmento. Para segmentos de código y datos de 32 bits este
  bit se deberá establecer en 1, mientras que para segmentos de 16 bits se
  deberá establecer en 0. 
   

@section gdt_selectors  Selectores

Los descriptores que se almacenan en la GDT se referencian a través de
@b Selectores. Estos permiten establecer la posición (el índice) en la cual 
se encuentra en descriptor de segmento, la Tabla de Descriptores en la cual
se encuentra y los privilegios de acceso.

@verbatim
            Selector
                                       LDT / GDT                                     
   15           3 2 1 0   
   +-------------+-+--+         +------------------------+
   |             | |R |         |                        |
   | INDEX       |T|P |         |     ....               |
   |             |I|L |         |                        |
   +-------------+-+--+         |                        |
         |                      +------------------------+
         |                      |     |     |      |     |
         +--------------------->|------------------------|
                                |           |            |
                                +------------------------+
                                |     |     |      |     |
                                |------------------------|
                                |           |            |
                                +------------------------+
   
   
   
@endverbatim
En donde:

- INDEX : Posición en la tabla en la cual se encuentra el descriptor.
- TI (Table Indicator) : Indicador de tabla dentro de la cual se debe
  buscar el descriptor (0 = GDT, 1 = LDT)
- RPL ( Requestor Privilege Level ) : Nivel de privilegios del solicitante.

En modo protegido de 32 bits, la primera entrada de la GDT es nula. Así, si un 
selector (registro de segmento) puede tomar el valor de 0 para indicar que no
ha sido configurado.

La LDT es similar en formato a la GDT, pero se diferencia en:
- Es usada por una tarea para gestionar sus segmentos
- Si primera entrada, a diferencia de la GDT sí puede ser utilizada.
- Si una tarea tiene definida su GDT, debe existir una entrada dentro de la
  GDT que describa la LDT.

@section address_translation Direcciones lógicas en Modo Real y Modo Protegido

Si importar su modo de operación, los procesadores IA-32 usan siempre direcciones
lógicas que se obtienen al combinar dos tipos de registros:

- Un registro de segmento (CS, DS, ES, FS, GS y SS)
- Un registro de propósito general, ESB, EBP,  EIP o un valor inmediato,
  dependiendo de la instrucciÓn.

Por ejemplo: CS:EIP, DS:SI, ES:DI.

Estas direcciones lógicas de memoria se transforman en direcciones lineales
de formas diferentes en modo real y modo protegido:

* En modo real, los registros de segmento (CS, DS, ES, FS, GS y SS)
  almacenan la dirección base del segmento dividida en 16. El registro
  de propósito general contiene el desplazamiento a partir de la dirección base 
  del segmento.  
  
  La dirección lineal se calcula de la siguiente forma:
  
  dir. lineal = segmento x 16 + offset

* En modo protegido, los registros de segmento (CS, DS, ES, FS, GS y SS)
  almacenan el selector que referencia a un descriptor de segmento dentro 
  de la GDT o la LDT. El registro de propósito general
  contiene el desplazamiento a partir de la dirección base del segmento.
  
  Para calcular una dirección lineal se realiza el siguiente proceso:
  
  -# Con el atributo TI del selector, se determina si el descriptor de segmento
    se buscará en la GDT o la LDT (GDT por defecto).
  -# Con el atributo RPL se determina si se tiene permiso para acceder al 
     descriptor.
  -# Con el atributo INDEX del selector, se busca el descriptor correspondiente
     en la tabla especificada.
  -# Del descriptor se obtiene la dirección base del segmento, la cual 
     se suma al desplazamiento para obtener la dirección lineal.
   
 
Gráficamente la traducción de una dirección lógica a una dirección lineal
en modo protegido se realiza de la siguiente forma:

@verbatim

					DIRECCIÓN LÓGICA
					
		Selector (Inmediato o                 Desplazamiento
        en un registro de segmento)       (Inmediato o en un registro de
    15                             0 31     segmento)                         0
    +--------------------+-------+-+ +----------------------------------------+
    |  INDEX (Índice     | DPL   |T| |                                        |
    |  dentro de la Tabla|(0 a 3)|I| |          OFFSET                        |
    |  de Descriptores)  |       | | |                                        |
    +--------------------+-------+-+ +----------------------------------------+
            |                     |                      |
    +-------+                     |                      |
    |   Tabla de                  v                      |
    |   Descriptores          (0=GDT), (1=LDT)           |
    |  +--------------------+                            |
    |  |                    |                            |
    |  |                    |                            |
    |  |                    |                            |
    |  |                    |                            |
    |  +--------------------+                            |
    |  | Descriptor de      |  Dir. Base    +---+ Offset |
    +->| Segmento           |-------------->| + |<-------+
       +--------------------+ del Segmento  +---+
       |                    |                 |
    +->+--------------------+                 | 
    |                           31            V                            0
    |                           +------------------------------------------+
    +-------+                   |        Dirección Lineal                  |
            |                   +------------------------------------------+
            |
            |                   
 47         |           15          0  
 +----------------------+-----------+  
 | Base                 |  Límite   |   <- GDTR
 +----------------------+-----------+  
 
@endverbatim


@par Ejemplos de GDT

Como se mencionó anteriormente, antes de habilitar el modo protegido del
procesador es  necesario configurar y cargar la GDT. A continuación se presenta
el contenido de una GDT, suponiendo que se definen los segmentos de código y
datos para el kernel en modo plano (flat) con nivel de privilegios 0.

Para este caso, la GDT contiene tres entradas (tres descriptores de segmento):
- El primer descriptor es nulo (todos sus campos son cero). Requerido por la
  arquitectura IA-32.
- El segundo descriptor se usa para describir el segmento de código del kernel,
  con los siguientes parámetros:
  - Base: 0 = 0x00000000
  - Límite: 4 GB  = 0xFFFFF, Bit G = 1
  - Nivel de Privilegios: 0
  - Tipo de Segmento: Código, Lectura / Ejecución
- El tercer descriptor se usa para describir el segmento de datos del kernel,
  con los siguientes parámetros:
  - Base: 0 = 0x00000000
  - Límite: 4 GB  = 0xFFFFF, Bit G = 1
  - Nivel de Privilegios: 0
  - Tipo de Segmento: Datos, Lectura / Escritura

El orden de los descriptores (después del primero) puede ser cualquiera,
aunque generalmente se define primero el descriptor de segmento de datos y luego
el descriptor de segmento de código.

A continuación se muestra el contenido de los tres descriptores de segmento.
- Descriptor de segmento nulo:
 @verbatim
 
 Descriptor nulo (Primera entrada de la GDT)
 
 
+-----------------+-----------------+-----------------------------------+
|                 | |D| |A|         | |     | |       |                 |
| BASE 24..31     |G|/|L|V| LIMIT   |P| DPL |S| TYPE  | BASE 16..23 	| 4
|                 | |B| |L| 16..19  | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
| SEGMENT BASE 0..15                | SEGMENT LIMIT 0..15               | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+
 
 31                23                15                7                  0
+-----------------+-----------------+-----------------------------------+
|                 | | | | |         | |     | |       |                 |
| 0 0 0 0 0 0 0 0 |0|0|0|0| 0 0 0 0 |0| 0 0 |0|0 0 0 0| 0 0 0 0 0 0 0 0 | 4
|                 | | | | |         | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
|  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  |  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+

 @endverbatim
   - El selector correspondiente a este descriptor es:
   @verbatim
   
         15           3 2 1 0 
         +-------------+-+--+
         |0000000000000|0|00|   Selector Nulo = 0x00  
         +-------------+-+--+   Índice = 0, TI = 0 (GDT), DPL = 0x00
   
   @endverbatim
- Descriptor de segmento de código:
 @verbatim
 
 Descriptor de Segmento de Código (Segunda entrada en la GDT)
 
 +-----------------+-----------------+-----------------------------------+
|                 | |D| |A|         | |     | |       |                 |
| BASE 24..31     |G|/|L|V| LIMIT   |P| DPL |S| TYPE  | BASE 16..23 	| 4
|                 | |B| |L| 16..19  | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
| SEGMENT BASE 0..15                | SEGMENT LIMIT 0..15               | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+
 
 31                23                15                7                  0
+-----------------+-----------------+-----------------------------------+
|                 | | | | |         | |     | |       |                 |
| 1 1 1 1 1 1 1 1 |1|1|0|0| 1 1 1 1 |1| 0 0 |1|1 0 1 0| 1 1 1 1 1 1 1 1 | 4
|                 | | | | |         | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
|  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  |  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+
 
 Observe que el campo Type tiene valor 1010, definido en el manual de
 Intel como Segmento de Código, Lectura y Ejecución. Consulte la tabla 3-1
 en ese documento.

 @endverbatim
   - El selector correspondiente a este descriptor es:
   @verbatim
   
         15           3 2 1 0 
         +-------------+-+--+
         |0000000000001|0|00|   Selector de Código: 1000 = 0x08
         +-------------+-+--+   Índice = 0, TI = 0 (GDT), DPL = 0x00
   
   @endverbatim
- Descriptor de segmento de datos:
 @verbatim
 
 Descriptor de Segmento de Datos (Tercera entrada en la GDT)
 
 +-----------------+-----------------+-----------------------------------+
|                 | |D| |A|         | |     | |       |                 |
| BASE 24..31     |G|/|L|V| LIMIT   |P| DPL |S| TYPE  | BASE 16..23 	| 4
|                 | |B| |L| 16..19  | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
| SEGMENT BASE 0..15                | SEGMENT LIMIT 0..15               | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+
 
 31                23                15                7                  0
+-----------------+-----------------+-----------------------------------+
|                 | | | | |         | |     | |       |                 |
| 1 1 1 1 1 1 1 1 |1|1|0|0| 1 1 1 1 |1| 0 0 |1|0 0 1 0| 1 1 1 1 1 1 1 1 | 4
|                 | | | | |         | |     | |       |                 |
|-----------------------------------+-----------------------------------+
|                                   |                                   |
|  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  |  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  | 0
|                                   |                                   |
+-----------------+-----------------+-----------------+-----------------+     
 
 Observe que el campo Type tiene valor 0010, definido en el manual de
 Intel como Segmento de Datos, Lectura y Escritura. Consulte la tabla 3-1
 en ese documento.

 @endverbatim
   - El selector correspondiente a este descriptor es:
   @verbatim
   
         15           3 2 1 0 
         +-------------+-+--+
         |0000000000010|0|00|   Selector de Código: 10000 = 0x10
         +-------------+-+--+   Índice = 2, TI = 0 (GDT), DPL = 0x00
   
   @endverbatim


@par Representación de la GDT en Lenguaje Ensamblador

La GDT no es más que un arreglo o secuencia de descriptores, uno tras de otros
en memoria. Por lo tanto, puede ser expresada en lenguaje ensamblador 
de la siguiente forma:

@verbatim
gdt:
    /* La primera entrada del gdt debe ser nula */
   .word 0x0000
   .word 0x0000
   .byte 0x00
   .byte 0x00
   .byte 0x00
   .byte 0x00

   .word 0xFFFF  /* Limite 0..15 = FFFF */
   .word 0x0000  /* Base 0..15 = 0000 */
   .byte 0x00    /* Base 16..23 = 00 */
   .byte 0x9A    /* 10011010 P=1, DPL=0, S=1, Tipo: codigo, read/execute,
		   		 	non conforming */
   .byte 0xCF	/* 11001111 G=1, D/B=1 (32 bits), L=0, AVL=0, Limite 16..19=F */
   .byte 0x00	/* Base 24..31 = 00 */

   .word 0xFFFF  /*Limite 0..15 = FFFF */
   .word 0x0000  /*Base 0..15 = 0000 */
   .byte 0x00    /*Base 16..23 = 00 */
   .byte 0x92	 /*10010010 P=1, DPL=0, S=1, Tipo: datos, read/write */
   .byte 0xCF /*11001111  G=1, D/B=1 (32 bits) , L=0, AVL=0, Limite 16..19=F  */
   .byte 0x00	 /*Base 24..31 = 00  */
   
@endverbatim


@par Representación de la GDT en lenguaje C

En Lenguaje C es necesario definir una estructura de datos que agrupe los campos
de un descriptor de segmento, y luego un arreglo que contenga descriptores.
Existe muchas representaciones diferentes, a continuación se muestran
algunos ejemplos:
-# Una representación de descriptor de segmento en la cual se usan enteros
de 32 bits:
@verbatim

struct gdt_descriptor {
	/* Bits menos significativos del descriptor. Agrupan
	 * Limite 0..15 y Base 0..15 del descriptor */
	 unsigned int low : 32;
	 /* Bits más significativos del descriptor. Agrupan Base 16..23, Tipo,
	  * S, DPL, P, Límite, AVL, L, D/B, G y Base 24..31 */
	 unsigned int high: 32;
}__attribute__((packed));

/* Definición de la GDT */
struct gdt[MAX_GDT_ENTRIES] __attribute__((aligned(8))); 

@endverbatim
La documentación de IA-32 exige que la GDT se encuentre alineada a un límite
de 8 bytes.
Para esta representación de descriptores de segmento el código de inicialización
puede ser el siguiente:
@verbatim
   /* Inicializar la primera entrada en nulo*/
   gdt[0].low = 0;
   gdt[0].high = 0;
   
   /* Inicializar la segunda entrada con un descriptor de segmento de
      código flat, nivel de privilegios 0 */
   gdt[1].low = 0x0000FFFF;
   gdt[1].high = 0x00CF9A00; 
   
   /* Inicializar la tercera entrada con un descriptor de segmento de datos
   flat, nivel de privilegios 0 */
   gdt[2].low = 0x0000FFFF;
   gdt[2].high = 0x00CF9200;   
@endverbatim
-# Una representación de descriptor de segmento en la cual los campos se
especifican y se acceden por separado:
@verbatim

struct gdt_descriptor {
	unsigned limit_low			: 16, /* limite 0..15*/
		     base_low			: 16, /* base 0..15 */
		     base_middle		: 8,  /* base 16..23*/
		     type 				: 4,  /* Informacion de acceso */
		     code_or_data		: 1, /* 1 = codigo o datos, 0 = sistema */
		     dpl				: 2, /* Nivel de privilegio */
		     present			: 1, /* Presente */
		     limit_high			: 4, /* limite 16..19*/
		     available			: 1, /* Disponible */
		     l			        : 1, /* Reservado */
		     db				: 1, /* 0 = 16 bits, 1 = 32 bits */
		     granularity		: 1, /* 0 = bytes, 1 = 4096 bytes */
		     base_high			: 8; /* base 24..31*/
}__attribute__((packed)); /* Evitar posible alineacion del compilador */


/* Definición de la GDT */
struct gdt_descriptor gdt[MAX_GDT_ENTRIES] __attribute__((aligned(8)));

@endverbatim
Para esta representación de descriptores de segmento el código de inicialización
puede ser el siguiente:
@verbatim
   /* Inicializar la primera entrada en nulo*/
   gdt[0].limit_low = 0x0000;   /* limite 0..15*/
   gdt[0].base_low = 0x0000;    /* base 0..15 */
   gdt[0].base_middle = 0x00;   /* base 16..23 */
   gdt[0].type = 0x0;           /* Informacion de acceso */
   gdt[0].code_or_data = 0;     /* 1 = codigo o datos, 0 = sistema */
   gdt[0].dpl = 0;              /* Nivel de privilegio */
   gdt[0].present = 0;          /* Presente */
   gdt[0].limit_high = 0x0;     /* limite 16..19*/
   gdt[0].available = 0;        /* Disponible */
   gdt[0].l = 0;                /* Reservado */
   gdt[0].db = 0;               /* 0 = 16 bits, 1 = 32 bits */
   gdt[0].granularity = 0;      /* 0 = bytes, 1 = 4096 bytes */
   gdt[0].base_high= 0x00;      /* base 24..31*/
    
   /* Inicializar la segunda entrada con un descriptor de segmento de
      código flat, nivel de privilegios 0 */
   gdt[1].limit_low = 0xFFFF    /* limite 0..15*/
   gdt[1].base_low = 0x0000;    /* base 0..15 */
   gdt[1].base_middle = 0x00;   /* base 16..23 */
   gdt[1].type = 0xA;           /* Informacion de acceso: Código, R/X */
   gdt[1].code_or_data = 1;     /* 1 = codigo o datos, 0 = sistema */
   gdt[1].dpl = 0;              /* Nivel de privilegio */
   gdt[1].present = 1;          /* Presente */
   gdt[1].limit_high = 0xF;       /* limite 16..19*/
   gdt[1].available = 0;        /* Disponible */
   gdt[1].l = 0;                /* Reservado */
   gdt[1].db = 1;               /* 0 = 16 bits, 1 = 32 bits */
   gdt[1].granularity = 1;      /* 0 = bytes, 1 = 4096 bytes */
   gdt[1].base_high= 0;         /* base 24..31*/
   
   /* Inicializar la tercera entrada con un descriptor de segmento de datos
   flat, nivel de privilegios 0 */
   gdt[2].limit_low = 0xFFFF    /* limite 0..15*/
   gdt[2].base_low = 0x0000;    /* base 0..15 */
   gdt[2].base_middle = 0x00;   /* base 16..23 */
   gdt[2].type = 0x2;           /* Informacion de acceso: Datos, R/W */
   gdt[2].code_or_data = 1;     /* 1 = codigo o datos, 0 = sistema */
   gdt[2].dpl = 0;              /* Nivel de privilegio */
   gdt[2].present = 1;          /* Presente */
   gdt[2].limit_high = 0xF;     /* limite 16..19*/
   gdt[2].available = 0;        /* Disponible */
   gdt[2].l = 0;                /* Reservado */
   gdt[2].db = 1;               /* 0 = 16 bits, 1 = 32 bits */
   gdt[2].granularity = 1;      /* 0 = bytes, 1 = 4096 bytes */
   gdt[2].base_high= 0;         /* base 24..31*/ 
@endverbatim

@par Carga de la GDT

Para cargar la GDT se utiliza la instrucción de ensamblador
  @code 
  lgdt ptr_addr
  @endcode
 
La instrucción lgdt toma el puntero y lo carga en el registro GDTR del 
procesador. Así, la traduccion de direcciones lógicas a direcciones físicas se
realiza por hardware.
 
ptr_addr corresponde a la dirección de memoria en la cual se encuentra
una estructura de datos que describe la GDT. Esta estructura de datos se
denomina 'puntero al GDT', 'GDT Pointer'.

El puntero al GDT tiene el siguiente formato:
@verbatim
 47                  15              0
 +----------------------------------+
 |      base         |    límite    |
 +----------------------------------+

@endverbatim
 en donde:
 base = dirección lineal del gdt, que corresponde a la direccion
 de memoria de GDT.

 límite = tamaño de la GDT - 1.

 
Una vez que se ha cargado la GDT, se debe "pasar" nuevamente a modo 
protegido, estableciendo el bit 0 (PE) del registro CR0.

Después se debe realizar un far jmp (ljmp) usando un selector  que haga 
referencia a un descriptor de segmento de código configurado en la GDT. 
Esto se puede lograr mediante una instrucción 

@code
ljmp sel : offset.
@endcode

También se puede lograr mediante una instrucción iret, para simular un retorno
de interrupción, almacenando antes en la pila los valores de EFLAGS, CS e IP 
adecuados para apuntar a una instrucción dentro de un segmento de código 
definido en la GDT. Este proceso se muestra a continuación:

@code
push FLAGS_VAL
push SELECTOR_VAL
push OFFSET_VAL
iret
@endcode

En donde FLAGS_VAL será el valor del registro EFLAGS luego de retornar de la
interrupción, SELECTOR_VAL deberá ser un selector que referencia a un descriptor
de segmento de código configurado en la GDT, y OFFSET_VAL deberá ser el 
desplazamiento dentro del segmento de código en el cual se desea continuar la 
ejecución del kernel.

Finalmente se deben configurar los demás registros de segmento (DS, ES, FS, GS
y SS) para que contengan los selectores a descriptores de segmento de datos
configurados dentro de la GDT. 

Al ejecutar estos pasos, el procesador estará usando la GDT configurada. En caso
de cualquier error, el procesador lanzará una excepción de protección general
y se reiniciará. Si esto pasa, se debe verificar que los descriptores dentro 
de la GDT se encuentren bien definidos, y que los valores de los selectores
almacenados en los registros de segmento hagan referencia a descriptores válidos
dentro de la GDT.



*/